@namespace ComponentsLib
@inject IServiceManager ServiceManager
@implements IDisposable
@inject ICourier _courier

<div class="LocalGrid p-2 " @ondragend="()=>OnDragEnd()" @ondragenter="()=>OnPanelEnter()" @ondragleave="OnPanelLeave">

    @foreach (var user in ParamUsers)
    {
        var selectedUsers = ServiceManager.UserServiceLS.GetSelectedUsers().Value;
        string UserSelectionClass = selectedUsers.Contains(user.Id) ? "grid-item-selected" : "";

        <div class="grid-item @UserSelectionClass" @ondragstart="()=>OnUserDragStart(user.Id)" @onclick="()=>OnClickUserSelection(user.Id)">
            <UserCard ParamUserId="user.Id" />
        </div>
    }

</div>


@code {

    [Parameter] public List<ModelUser> ParamUsers { get; set; } = new();

    [Parameter] public EnumUserGroup ParamUserGroupType { get; set; } = EnumUserGroup.Grupa1;


    public async void OnDragEnd()
    {
        var draggedUsers = ServiceManager.DragDropLS.CurrentUsersBeingDragged;

        var CurrentGroup = ServiceManager.DragDropLS.LastDragedPannel;

        foreach (var userId in draggedUsers)
        {
            await ServiceManager.UserServiceLS.MoveUserToGivenGroup(userId, CurrentGroup);
        }

    }

    public void OnPanelEnter()
    {
        ServiceManager.DragDropLS.LastDragedPannel = ParamUserGroupType;
    }

    public void OnPanelLeave()
    {
        //  ServiceManager.DragDropLS.LastDragedPannel = null ;
    }

    public void OnClickUserSelection(Guid UserId)
    {
        ServiceManager.UserServiceLS.SelectUser(UserId);
    }


    public void OnUserDragStart(Guid UserId)
    {
        ServiceManager.DragDropLS.CurrentUsersBeingDragged.Clear();
        ServiceManager.DragDropLS.CurrentUsersBeingDragged.Add(UserId);
    }


    private async Task HandleUserGroupChange(NotificationShiftKeyRealeased notify, CancellationToken cancellationToken)
    {
        await InvokeAsync(StateHasChanged);
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        _courier.Subscribe<NotificationShiftKeyRealeased>(HandleUserGroupChange);

    }

    public void Dispose()
    {
        _courier.UnSubscribe<NotificationShiftKeyRealeased>(HandleUserGroupChange);
    }




}
