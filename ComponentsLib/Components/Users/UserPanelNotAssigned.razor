@namespace ComponentsLib
@implements IDisposable
@inject ICourier _courier
@inject IServiceManager ServiceManager

<div class=" rounded h-100 transparent-blur d-flex" style="flex-direction:column">

    <div class="d-flex justify-content-between px-3 pt-3 mb-5">
        <span class="fw-bold text-white">Użytkownicy</span>
        <span></span>
        <span class="text-end">
            <img class="text-white" src="/images/MenuIcons/menu_kontekstowe.png" />
        </span>

    </div>

    <div class="UserViewerContainer" >
        <UserViewer ParamUsers="Users" ParamUserGroupType="EnumUserGroup.None" />
    </div>

    <div>
        <ActionViewer />
    </div>

</div>


@code {
    public List<ModelUser> Users { get; set; } = new();


    protected override async Task OnParametersSetAsync()
    {
        await DownloadData();
    }


    protected  async Task DownloadData()
    {
        var GetUsersResult = await ServiceManager.UserServiceLS.GetUsersBasedOnGroup(EnumUserGroup.None);
        if (GetUsersResult.IsSuccess)
        {
            Users = GetUsersResult.Value;
        }
    }

    private async Task HandleUserGroupChange(NotificationGroupChange notify, CancellationToken cancellationToken)
    {
        if (notify.PreviousGroup == EnumUserGroup.None)
        {
            Users.RemoveAll(n => n.Id == notify.Data.Id);
            await InvokeAsync(StateHasChanged);
        }
        else if (notify.Data.UserGroup == EnumUserGroup.None)
        {
            Users.Add(notify.Data);
            await InvokeAsync(StateHasChanged);
        }

    }

    private async Task HandleUserOrder(NotificationOrderOfUserChanged notify, CancellationToken cancellationToken)
    {
        await DownloadData();
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _courier.Subscribe<NotificationGroupChange>(HandleUserGroupChange);
        _courier.Subscribe<NotificationOrderOfUserChanged>(HandleUserOrder);
    }

    public void Dispose()
    {
        _courier.UnSubscribe<NotificationGroupChange>(HandleUserGroupChange);
        _courier.UnSubscribe<NotificationOrderOfUserChanged>(HandleUserOrder);
    }


}
