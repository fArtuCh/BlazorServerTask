@namespace ComponentsLib
@implements IDisposable
@inject ICourier _courier
@inject IServiceManager ServiceManager



<div class="rounded  h-100 transparent-blur d-flex" style="flex-direction:column">

    <div class="py-2 px-3 LocalGridForTabs">

        @foreach (EnumUserGroup value in Enum.GetValues(typeof(EnumUserGroup)))
        {

            if (value == EnumUserGroup.None)
            {
                continue;
            }
            <div>
                <button class="btn btn-light w-100 @GroupSelectedButtonStyle(value)"
                        @ondragenter="()=>OnUserDragEnter(value)"
                        @ondragend="()=>OnUserDragEnter(value)"
                        @onclick="()=>OnClickChangeGroup(value)">

                    <span>
                        <CptIconGroupShower ParamChoosenGroup="value" />
                    </span>


                    <span>
                        @value.ToString()
                    </span>


                </button>
            </div>
        }

    </div>
    <div class="d-flex" style="flex-grow:1">

        <LoadingComponent ParamIsLoading="IsLoading">
            <UserViewer ParamUsers="CurrentUsers" ParamUserGroupType="@CurrentGroupSelected" />
        </LoadingComponent>

    </div>



</div>


@code {
    private EnumUserGroup CurrentGroupSelected { get; set; } = EnumUserGroup.Grupa1;

    public List<ModelUser> CurrentUsers { get; set; } = new();


    private string GroupSelectedButtonStyle(EnumUserGroup enumUserGroup) => enumUserGroup == CurrentGroupSelected ? "py-3" : "";

    public bool IsLoading { get; set; }

    public async Task OnClickChangeGroup(EnumUserGroup enumUserGroup)
    {
        CurrentGroupSelected = enumUserGroup;
        await DownloadUsersForGroup();
    }

    public async Task DownloadUsersForGroup()
    {
        IsLoading = true;
        StateHasChanged();

        var result = await ServiceManager.UserServiceLS.GetUsersBasedOnGroup(CurrentGroupSelected);
        if (result.IsSuccess)
        {
            CurrentUsers = result.Value;
        }
        IsLoading = false;
    }

    public async Task OnUserDragEnter(EnumUserGroup enumUserGroup)
    {
        if (ServiceManager.DragDropLS.CurrentUsersBeingDragged.Any())
        {
            CurrentGroupSelected = enumUserGroup;
            await DownloadUsersForGroup();
        }
    }
    public async Task OnUserDragEnd(EnumUserGroup enumUserGroup)
    {
        if (ServiceManager.DragDropLS.CurrentUsersBeingDragged.Any())
        {
            foreach (var user in ServiceManager.DragDropLS.CurrentUsersBeingDragged)
            {
               await ServiceManager.UserServiceLS.MoveUserToGivenGroup(user, enumUserGroup);
            }

            ServiceManager.DragDropLS.CurrentUsersBeingDragged.Clear();

            CurrentGroupSelected = enumUserGroup;
            await DownloadUsersForGroup();
        }
    }



    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;
        StateHasChanged();

        var result = await ServiceManager.UserServiceLS.GetUsersBasedOnGroup(CurrentGroupSelected);

        if (result.IsSuccess)
        {
            CurrentUsers = result.Value;
        }

        IsLoading = false;

    }

    private async Task HandleUserGroupChange(NotificationGroupChange notify, CancellationToken cancellationToken)
    {
        if (notify.PreviousGroup == CurrentGroupSelected)
        {
            CurrentUsers.RemoveAll(n => n.Id == notify.Data.Id);
            await InvokeAsync(StateHasChanged);
        }
        else if (notify.Data.UserGroup == CurrentGroupSelected)
        {
            CurrentUsers.Add(notify.Data);
            await InvokeAsync(StateHasChanged);
        }

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _courier.Subscribe<NotificationGroupChange>(HandleUserGroupChange);
    }

    public void Dispose()
    {
        _courier.UnSubscribe<NotificationGroupChange>(HandleUserGroupChange);
    }


}
